"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = _interopRequire(require("react"));

var ol = _interopRequire(require("openlayers"));

var OLComponent = _interopRequire(require("../ol-component"));

var RawGeometry = (function (_OLComponent) {
  function RawGeometry() {
    _classCallCheck(this, RawGeometry);

    if (_OLComponent != null) {
      _OLComponent.apply(this, arguments);
    }
  }

  _inherits(RawGeometry, _OLComponent);

  _createClass(RawGeometry, {
    componentDidMount: {
      /*
       * Allows combining a ol.geom.Geometry class with ol-react. Useful if you have
       * retrieved the object from somewhere else, and don't want to convert back
       * into an ol-react component.
       */

      value: function componentDidMount() {
        this.context.feature.setGeometry(this.props.geometry);
      }
    },
    componentWillUnmount: {
      value: function componentWillUnmount() {
        this.context.feature.setGeometry(undefined);
      }
    }
  });

  return RawGeometry;
})(OLComponent);

module.exports = RawGeometry;

RawGeometry.propTypes = {
  geometry: React.PropTypes.instanceOf(ol.geom.Geometry).isRequired };

RawGeometry.contextTypes = {
  feature: React.PropTypes.instanceOf(ol.Feature)
};