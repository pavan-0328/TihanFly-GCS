"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = _interopRequire(require("react"));

var ol = _interopRequire(require("openlayers"));

var OLControl = _interopRequire(require("./ol-control"));

var OverviewMap = (function (_OLControl) {
  function OverviewMap() {
    _classCallCheck(this, OverviewMap);

    if (_OLControl != null) {
      _OLControl.apply(this, arguments);
    }
  }

  _inherits(OverviewMap, _OLControl);

  _createClass(OverviewMap, {
    createControl: {
      value: function createControl(props) {
        return new ol.control.OverviewMap({
          className: props.className,
          collapsed: props.collapsed,
          collapseLabel: props.collapseLabel,
          collapsible: props.collapsible,
          label: props.label,
          layers: props.layers,
          tipLabel: props.tipLabel,
          view: props.view
        });
      }
    }
  });

  return OverviewMap;
})(OLControl);

module.exports = OverviewMap;

OverviewMap.propTypes = Object.assign({}, OLControl.propTypes, {
  className: React.PropTypes.string,
  collapsed: React.PropTypes.bool,
  collapseLabel: React.PropTypes.string,
  collapsible: React.PropTypes.bool,
  label: React.PropTypes.node,
  layers: React.PropTypes.oneOfType([React.PropTypes.arrayOf(React.PropTypes.instanceOf(ol.layer.Layer)), React.PropTypes.instanceOf(ol.Collection)]),
  tipLabel: React.PropTypes.string,
  view: React.PropTypes.instanceOf(ol.View)
});