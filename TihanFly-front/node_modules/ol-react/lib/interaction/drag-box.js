"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = _interopRequire(require("react"));

var ol = _interopRequire(require("openlayers"));

var OLInteraction = _interopRequire(require("./ol-interaction"));

var DragBox = (function (_OLInteraction) {
  function DragBox() {
    _classCallCheck(this, DragBox);

    if (_OLInteraction != null) {
      _OLInteraction.apply(this, arguments);
    }
  }

  _inherits(DragBox, _OLInteraction);

  _createClass(DragBox, {
    createInteraction: {
      value: function createInteraction(props) {
        return new ol.interaction.DragBox({
          condition: props.condition
        });
      }
    }
  });

  return DragBox;
})(OLInteraction);

module.exports = DragBox;

DragBox.propTypes = Object.assign({}, OLInteraction.propTypes, {
  boxdrag: React.PropTypes.func,
  boxend: React.PropTypes.func,
  boxstart: React.PropTypes.func,
  condition: React.PropTypes.func
});

DragBox.olEvents = ["boxdrag", "boxend", "boxstart"];