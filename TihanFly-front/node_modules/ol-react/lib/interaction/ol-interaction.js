"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var React = _interopRequire(require("react"));

var ol = _interopRequire(require("openlayers"));

var OLComponent = _interopRequire(require("../ol-component"));

var OLInteraction = (function (_OLComponent) {
  function OLInteraction(props) {
    _classCallCheck(this, OLInteraction);

    _get(Object.getPrototypeOf(OLInteraction.prototype), "constructor", this).call(this, props);
    this.interaction = this.createInteraction(props);
    this.eventHandlerKeys_ = {};
  }

  _inherits(OLInteraction, _OLComponent);

  _createClass(OLInteraction, {
    componentDidMount: {
      value: function componentDidMount() {
        this.updateActiveState_(this.props);
        this.updateEventHandlersFromProps_(this.props);
        this.context.map.addInteraction(this.interaction);
      }
    },
    componentWillReceiveProps: {
      value: function componentWillReceiveProps(newProps) {
        this.updateActiveState_(newProps);
        this.updateEventHandlersFromProps_(newProps, this.props);
      }
    },
    componentWillUnmount: {
      value: function componentWillUnmount() {
        this.context.map.removeInteraction(this.interaction);
        this.updateEventHandlersFromProps_({});
      }
    },
    createInteraction: {
      value: function createInteraction(props) {
        throw new TypeError("You must override createInteraction() in classes derived " + "from OLInteraction");
      }
    },
    updateActiveState_: {
      value: function updateActiveState_(props) {
        if (props.hasOwnProperty("active")) {
          this.interaction.setActive(props.active);
        } else {
          this.interaction.setActive(true);
        }
      }
    },
    updateEventHandler_: {
      value: function updateEventHandler_(name, handler) {
        var key = this.eventHandlerKeys_[name];
        if (key) {
          this.interaction.unByKey(key);
          delete this.eventHandlerKeys_[name];
        }
        if (handler) {
          this.eventHandlerKeys_[name] = this.interaction.on(name, handler);
        }
      }
    },
    updateEventHandlersFromProps_: {
      value: function updateEventHandlersFromProps_(props, oldProps) {
        var events = this.constructor.olEvents || [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prop = _step.value;

            var handler = props[prop];
            var oldHandler = oldProps ? oldProps[prop] : undefined;
            if (oldHandler !== handler) {
              this.updateEventHandler_(prop, handler);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"]) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  });

  return OLInteraction;
})(OLComponent);

module.exports = OLInteraction;

OLInteraction.propTypes = {
  active: React.PropTypes.bool.isRequired
};

OLInteraction.defaultProps = {
  active: true
};

OLInteraction.contextTypes = {
  map: React.PropTypes.instanceOf(ol.Map)
};